@*model VidlyDec2018.ViewModels.AllCustomersViewModel*@
@*@model List<VidlyDec2018.Models.Customer>*@
@model IEnumerable<VidlyDec2018.Models.Customer>
@{
    ViewBag.Title = "All";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>All Customers</h2>

@using (Html.BeginForm("New", "Customers"))
{

    <div>
        <button type="submit" class="btn btn-primary"> New Customer </button>
    </div>
    <p>
         
    </p>
}



<table id="customers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Membership Type</th>
            <th>Delete</th>
        </tr>
    </thead>

    <tbody>

        @*this for each contains call to the MVC app, now it is calling the app using the API with the jQuery stuff below*@
        @*
        @foreach (var customer in Model)
        {
            <tr>
                <td>@Html.ActionLink(customer.Name, String.Format("/Edit/{0}", customer.Id), "Customers")</td>
                <td>@customer.MebershipType.Name</td>
                <td>
                    <button data-customer-id="@customer.Id" class="btn-link js-delete"> Delete </button>

                </td>

            </tr>

            //below should be in between tr tags
                @*old one below*@
        @*<td>@Html.ActionLink(customer.Name, String.Format("/Details/{0}", customer.Id), "Customers")</td>*@

        @*video variant didn't work for me*@
        @*<td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id })</td>*@
        @* alternative way of the above
        <td>@Html.ActionLink(customer.Name, "Details", new { id = customer.Id }, null)</td>
        *@
        @* below would cause an exception, as only customer objects have been loaded from DB, not related tables / data from*@
        @*customer is data from one table .MembershipType is the foreign key, .Discount rate is in another table, % is plain text*@


        @*
        }

            bracket for foreach loop *@
    </tbody>

</table>
@section scripts
{
    <script>
        $(document).ready(function () {
            //below makes the table, with the id of 'customers', into a datatable
           var table = $("#customers").DataTable({
                ajax: {
                    url: "/api/customers",
                    dataSrc:""
                },
                columns: [
                    {
                        data: "name",
                        render: function (data, type, customer) {
                            return "<a href='/customers/edit/" + customer.id + "'>" + customer.name + "</a>"

                        }
                    },
                    {
                        //should be membershipType
                        data: "membershipType.name"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>"
                        }
                    }
                    

                ]

            });

            //this code has been refactored by the program, it was originally as below, which took up more memoery (each click event handler needed its own space in RAM, whereas now it shares one location to handle this)
            //$("#customers .js-delete").on("click", function () {
            $("#customers").on("click", ".js-delete", function deleteCustomer () {
                var button = $(this);
                
                bootbox.confirm("Sure you want to delete?", function (result) {
                    //if result has a truthy value (which means it is not null or undefined)
                    
                    if (result) {
                        $.ajax({
                            //this has to be button.attr instead of $(this).attr..// caused an undefined error
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                //the below only removes from teh table, it still exists on teh client - through search function (although not on the server / database anymore as DELETE http request gone through) 
                                
                                //button.parents("tr").remove();
                                table.row(button.parents("tr")).remove().draw();

                            }
                        });
                    }
                });
                
                //below is standard way to do it, without bootbox / jQuery aesthetic confirm box

                /*
                if (confirm("Are you sure you want to delete?")) {
                    
                    //if confirm result is true, call our APi usign jQuery Ajax
                    $.ajax({
                        url: "/api/customers/" + $(this).attr("data-customer-id"),
                        method: "DELETE",
                        success: function () {
                            //console.log("Success");
                            //on successful deletion, this then deletes the table row which held the record from the database
                            // var button below is a variable which holds a reference to the button which fired the veent, and it deletes it's parent (the tr it is held in" within the DOM)
                            button.parents("tr").remove();
                        }
                    });
                }
                */
                
            });
        });
    </script>
}



